import json
import boto3
import os

def lambda_handler(event, context):
    # Initialize S3 client
    s3 = boto3.client('s3')
    
    # Extracting bucket and object key from the event (S3 Trigger)
    input_bucket_name = event['Records'][0]['s3']['bucket']['name']
    input_key = event['Records'][0]['s3']['object']['key']
    
    # Fetching the text file from the input bucket
    obj = s3.get_object(Bucket=input_bucket_name, Key=input_key)
    input_text = obj['Body'].read().decode('utf-8')
    print(f"Input text from {input_key}: {input_text}")
    
    # Initializing Polly client
    polly = boto3.client('polly')
    
    # Generating speech from text
    response = polly.synthesize_speech(
        Text=input_text,
        OutputFormat='mp3',
        VoiceId='Joanna'
    )
    
    # Defining output S3 bucket and file name
    output_bucket_name = os.environ['OUTPUT_BUCKET_NAME']
    file_name = f"{os.path.splitext(input_key)[0]}.mp3"
    
    # Saving the audio stream to a temporary file
    with open('/tmp/temp.mp3', 'wb') as f:
        f.write(response['AudioStream'].read())
    
    # Uploading the file to the output S3 bucket
    try:
        s3.upload_file('/tmp/temp.mp3', output_bucket_name, file_name)
        print(f"File uploaded to {output_bucket_name}: {file_name}")
    except Exception as e:
        print(f"Error uploading to S3: {e}")
        return {
            'statusCode': 500,
            'body': json.dumps({'message': 'Error uploading to S3', 'error': str(e)})
        }
    
    return {
        'statusCode': 200,
        'body': json.dumps({'message': f'File saved to S3: {file_name}'})
    }
